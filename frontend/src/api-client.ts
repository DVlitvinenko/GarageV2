//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Обновление информации о машине
     * @return Успешное обновление информации о машине
     */
    updateCar(body: Body): Promise<Anonymous> {
        let url_ = this.baseUrl + "/cars";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCar(_response);
        });
    }

    protected processUpdateCar(response: Response): Promise<Anonymous> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous2.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous3.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous4.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous>(null as any);
    }

    /**
     * Добавить несколько автомобилей, все добавленные автомобили будут доступны к бронированию сразу после привязки к ним Условий бронирования (метод: /cars/rent-term)
     * @return Успешное добавление автомобилей
     */
    pushCars(body: Body2): Promise<Anonymous5> {
        let url_ = this.baseUrl + "/cars";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPushCars(_response);
        });
    }

    protected processPushCars(response: Response): Promise<Anonymous5> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous5.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous6.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous7.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous8.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous5>(null as any);
    }

    /**
     * Обновление статуса допуска к бронированию
     * @return Успешное обновление статуса автомобиля
     */
    updateCarStatus(body: Body3): Promise<Anonymous9> {
        let url_ = this.baseUrl + "/cars/status";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCarStatus(_response);
        });
    }

    protected processUpdateCarStatus(response: Response): Promise<Anonymous9> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous9.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous10.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous11.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous12.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = Anonymous13.fromJS(resultData409);
            return throwException("\u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous9>(null as any);
    }

    /**
     * Изменить статус бронирования автомобиля, ОТ МОЕГО ГАРАЖА
     * @return Успешное изменение статуса бронирования
     */
    changedBookingStatus(body: Body4): Promise<void> {
        let url_ = this.baseUrl + "/URL_АДРЕС_ПАРКА/cars/outbound/status";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangedBookingStatus(_response);
        });
    }

    protected processChangedBookingStatus(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Создание или обновление условий аренды
     * @return Успешное создание или обновление условий аренды
     */
    createOrUpdateRentTerm(body: Body5): Promise<Anonymous14> {
        let url_ = this.baseUrl + "/parks/rent-terms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateRentTerm(_response);
        });
    }

    protected processCreateOrUpdateRentTerm(response: Response): Promise<Anonymous14> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous14.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous15.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = Anonymous16.fromJS(resultData422);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result422);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous17.fromJS(resultData404);
            return throwException("\u041f\u0430\u0440\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c API \u043a\u043b\u044e\u0447\u043e\u043c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous18.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous14>(null as any);
    }

    /**
     * Обновление условия аренды для автомобиля
     * @return Успешное обновление условия аренды для автомобиля
     */
    updateCarRentTerm(body: Body6): Promise<Anonymous19> {
        let url_ = this.baseUrl + "/cars/rent-term";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCarRentTerm(_response);
        });
    }

    protected processUpdateCarRentTerm(response: Response): Promise<Anonymous19> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous19.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous20.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous21.fromJS(resultData400);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous22.fromJS(resultData404);
            return throwException("\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0430\u0440\u0435\u043d\u0434\u044b \u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous23.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous19>(null as any);
    }

    /**
     * Получение данных пользователя (аутентифицированный запрос)
     * @return Успешная аутентификация или регистрация
     */
    getUser(): Promise<Anonymous24> {
        let url_ = this.baseUrl + "/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<Anonymous24> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous24.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = Anonymous25.fromJS(resultData422);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous24>(null as any);
    }

    /**
     * Удаление пользователя и связанных записей
     * @return Пользователь успешно удален
     */
    deleteUser(): Promise<Anonymous26> {
        let url_ = this.baseUrl + "/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<Anonymous26> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous26.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous27.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous26>(null as any);
    }

    /**
     * Аутентификация пользователя или регистрация нового
     * @return Успешная аутентификация или регистрация
     */
    loginOrRegister(body: Body7): Promise<string> {
        let url_ = this.baseUrl + "/user/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoginOrRegister(_response);
        });
    }

    protected processLoginOrRegister(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = Anonymous28.fromJS(resultData422);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * Выход пользователя из системы
     * @return Пользователь успешно вышел из системы
     */
    logout(): Promise<Anonymous29> {
        let url_ = this.baseUrl + "/user/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: Response): Promise<Anonymous29> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous29.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous30.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous29>(null as any);
    }

    /**
     * Создание и отправка проверочного кода на указанный номер телефона
     * @return Запрос успешно выполнен
     */
    createAndSendCode(body: Body8): Promise<Anonymous31> {
        let url_ = this.baseUrl + "/user/code";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateAndSendCode(_response);
        });
    }

    protected processCreateAndSendCode(response: Response): Promise<Anonymous31> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous31.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = Anonymous32.fromJS(resultData422);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous31>(null as any);
    }

    /**
     * Получение списка автомобилей с учетом фильтров (аутентифицированный запрос)
     * @param offset Смещение (начальная позиция) для выборки
     * @param limit Максимальное количество записей для выборки
     * @param city Название города
     * @param fuel_type (optional) Тип топлива
     * @param transmission_type (optional) Тип трансмиссии
     * @param brand (optional) Марка автомобиля
     * @param sorting (optional) сортировка, asc или desc
     * @param model (optional) Модель автомобиля
     * @param car_class (optional) Класс автомобиля (1 - Эконом, 2 - Комфорт, 3 - Комфорт+, 4 - Бизнес)
     * @return Успешный ответ
     */
    searchCars(offset: number, limit: number, city: string, fuel_type: FuelType | undefined, transmission_type: TransmissionType | undefined, brand: string | undefined, sorting: string | undefined, model: string | undefined, car_class: CarClass | undefined): Promise<Anonymous33> {
        let url_ = this.baseUrl + "/cars/search?";
        if (offset === undefined || offset === null)
            throw new Error("The parameter 'offset' must be defined and cannot be null.");
        else
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit === undefined || limit === null)
            throw new Error("The parameter 'limit' must be defined and cannot be null.");
        else
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (city === undefined || city === null)
            throw new Error("The parameter 'city' must be defined and cannot be null.");
        else
            url_ += "city=" + encodeURIComponent("" + city) + "&";
        if (fuel_type === null)
            throw new Error("The parameter 'fuel_type' cannot be null.");
        else if (fuel_type !== undefined)
            url_ += "fuel_type=" + encodeURIComponent("" + fuel_type) + "&";
        if (transmission_type === null)
            throw new Error("The parameter 'transmission_type' cannot be null.");
        else if (transmission_type !== undefined)
            url_ += "transmission_type=" + encodeURIComponent("" + transmission_type) + "&";
        if (brand === null)
            throw new Error("The parameter 'brand' cannot be null.");
        else if (brand !== undefined)
            url_ += "brand=" + encodeURIComponent("" + brand) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (model === null)
            throw new Error("The parameter 'model' cannot be null.");
        else if (model !== undefined)
            url_ += "model=" + encodeURIComponent("" + model) + "&";
        if (car_class === null)
            throw new Error("The parameter 'car_class' cannot be null.");
        else if (car_class !== undefined)
            url_ += "car_class=" + encodeURIComponent("" + car_class) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchCars(_response);
        });
    }

    protected processSearchCars(response: Response): Promise<Anonymous33> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous33.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous33>(null as any);
    }

    /**
     * Бронирование автомобиля
     * @return Успешное бронирование
     */
    booking(body: Body9): Promise<Anonymous34> {
        let url_ = this.baseUrl + "/auth/cars/booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBooking(_response);
        });
    }

    protected processBooking(response: Response): Promise<Anonymous34> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous34.fromJS(resultData200);
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = Anonymous35.fromJS(resultData403);
            return throwException("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0438\u043b\u0438 \u043d\u0435 \u0432\u0435\u0440\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous36.fromJS(resultData404);
            return throwException("\u041c\u0430\u0448\u0438\u043d\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous34>(null as any);
    }

    /**
     * Отмена бронирования автомобиля (аутентифицированный запрос)
     * @return Успешный ответ
     */
    cancelBooking(body: Body10): Promise<Anonymous37> {
        let url_ = this.baseUrl + "/auth/cars/cancel-booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancelBooking(_response);
        });
    }

    protected processCancelBooking(response: Response): Promise<Anonymous37> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous37.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous38.fromJS(resultData401);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = Anonymous39.fromJS(resultData403);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous40.fromJS(resultData404);
            return throwException("\u041c\u0430\u0448\u0438\u043d\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = Anonymous41.fromJS(resultData409);
            return throwException("\u041c\u0430\u0448\u0438\u043d\u0430 \u043d\u0435 \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = Anonymous42.fromJS(resultData500);
            return throwException("\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous37>(null as any);
    }

    /**
     * Получить информацию об автомобиле
     * @param id Идентификатор автомобиля
     * @param unnamed (optional) 
     * @return Успешный ответ
     */
    getCar(id: number, unnamed: TransmissionType | undefined): Promise<Anonymous43> {
        let url_ = this.baseUrl + "/car?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCar(_response);
        });
    }

    protected processGetCar(response: Response): Promise<Anonymous43> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous43.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Anonymous44.fromJS(resultData404);
            return throwException("\u041c\u0430\u0448\u0438\u043d\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous43>(null as any);
    }

    /**
     * Загрузить файл
     * @param file (optional) Файл для загрузки
     * @param driverDocumentType (optional) 
     * @return Файл успешно загружен
     */
    uploadFile(file: FileParameter | undefined, driverDocumentType: DriverDocumentType | undefined): Promise<Anonymous45> {
        let url_ = this.baseUrl + "/driver/upload-file";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        if (driverDocumentType === null || driverDocumentType === undefined)
            throw new Error("The parameter 'driverDocumentType' cannot be null.");
        else
            content_.append("driverDocumentType", driverDocumentType.toString());

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUploadFile(_response);
        });
    }

    protected processUploadFile(response: Response): Promise<Anonymous45> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous45.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Anonymous46.fromJS(resultData400);
            return throwException("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous45>(null as any);
    }
}

/** The unique identifier of a product in our catalog */
export enum CarClass {
    Economy = "Economy",
    Comfort = "Comfort",
    ComfortPlus = "ComfortPlus",
    Business = "Business",
}

/** The unique identifier of a product in our catalog */
export enum CarStatus {
    Showed = "Showed",
    Hidden = "Hidden",
}

/** The unique identifier of a product in our catalog */
export enum DriverDocumentType {
    Image_licence_front = "image_licence_front",
    Image_licence_back = "image_licence_back",
    Image_pasport_front = "image_pasport_front",
    Image_pasport_address = "image_pasport_address",
    Image_fase_and_pasport = "image_fase_and_pasport",
}

/** The unique identifier of a product in our catalog */
export enum FuelType {
    Gas = "Gas",
    Gasoline = "Gasoline",
}

/** The unique identifier of a product in our catalog */
export enum TransmissionType {
    Mechanics = "Mechanics",
    Automatic = "Automatic",
}

/** The unique identifier of a product in our catalog */
export enum UserStatus {
    DocumentsNotUploaded = "DocumentsNotUploaded",
    Verification = "Verification",
    Verified = "Verified",
}

/** The unique identifier of a product in our catalog */
export enum UserType {
    Driver = "Driver",
    Manager = "Manager",
    Admin = "Admin",
}

export class Body implements IBody {
    /** VIN-номер машины */
    id?: string;
    /** Город машины */
    city?: string | undefined;
    /** Подразделение машины */
    division_name?: string | undefined;
    /** Тариф машины (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number | undefined;
    /** Изображения машины */
    images?: string[] | undefined;

    [key: string]: any;

    constructor(data?: IBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.city = _data["city"];
            this.division_name = _data["division_name"];
            this.class = _data["class"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
        }
    }

    static fromJS(data: any): Body {
        data = typeof data === 'object' ? data : {};
        let result = new Body();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["city"] = this.city;
        data["division_name"] = this.division_name;
        data["class"] = this.class;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        return data;
    }
}

export interface IBody {
    /** VIN-номер машины */
    id?: string;
    /** Город машины */
    city?: string | undefined;
    /** Подразделение машины */
    division_name?: string | undefined;
    /** Тариф машины (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number | undefined;
    /** Изображения машины */
    images?: string[] | undefined;

    [key: string]: any;
}

export class Body2 implements IBody2 {
    cars?: Cars[];

    [key: string]: any;

    constructor(data?: IBody2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cars"])) {
                this.cars = [] as any;
                for (let item of _data["cars"])
                    this.cars!.push(Cars.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body2 {
        data = typeof data === 'object' ? data : {};
        let result = new Body2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cars)) {
            data["cars"] = [];
            for (let item of this.cars)
                data["cars"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody2 {
    cars?: Cars[];

    [key: string]: any;
}

export class Body3 implements IBody3 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Допуск автомобиля к бронированию. 1 - допущен, 0 - заблокирован */
    status?: number;

    [key: string]: any;

    constructor(data?: IBody3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Body3 {
        data = typeof data === 'object' ? data : {};
        let result = new Body3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["status"] = this.status;
        return data;
    }
}

export interface IBody3 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Допуск автомобиля к бронированию. 1 - допущен, 0 - заблокирован */
    status?: number;

    [key: string]: any;
}

export class Body4 implements IBody4 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Статус бронирования. 1 - забронировано, 0 - бронь отменена */
    is_booked?: number;

    [key: string]: any;

    constructor(data?: IBody4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.is_booked = _data["is_booked"];
        }
    }

    static fromJS(data: any): Body4 {
        data = typeof data === 'object' ? data : {};
        let result = new Body4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["is_booked"] = this.is_booked;
        return data;
    }
}

export interface IBody4 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Статус бронирования. 1 - забронировано, 0 - бронь отменена */
    is_booked?: number;

    [key: string]: any;
}

export class Body5 implements IBody5 {
    /** Идентификатор существующего условия аренды (для обновления) */
    rent_term_id?: number | undefined;
    /** Сумма ежедневного залога */
    deposit_amount_daily?: number;
    /** Общая сумма залога */
    deposit_amount_total?: number;
    /** Возможность выкупа (true/false) */
    is_buyout_possible?: boolean;
    /** Минимальный период аренды в днях */
    minimum_period_days?: number;
    /** Название условия аренды */
    name?: string;
    /** Схемы аренды */
    schemas?: Schemas[];

    [key: string]: any;

    constructor(data?: IBody5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rent_term_id = _data["rent_term_id"];
            this.deposit_amount_daily = _data["deposit_amount_daily"];
            this.deposit_amount_total = _data["deposit_amount_total"];
            this.is_buyout_possible = _data["is_buyout_possible"];
            this.minimum_period_days = _data["minimum_period_days"];
            this.name = _data["name"];
            if (Array.isArray(_data["schemas"])) {
                this.schemas = [] as any;
                for (let item of _data["schemas"])
                    this.schemas!.push(Schemas.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body5 {
        data = typeof data === 'object' ? data : {};
        let result = new Body5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["rent_term_id"] = this.rent_term_id;
        data["deposit_amount_daily"] = this.deposit_amount_daily;
        data["deposit_amount_total"] = this.deposit_amount_total;
        data["is_buyout_possible"] = this.is_buyout_possible;
        data["minimum_period_days"] = this.minimum_period_days;
        data["name"] = this.name;
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBody5 {
    /** Идентификатор существующего условия аренды (для обновления) */
    rent_term_id?: number | undefined;
    /** Сумма ежедневного залога */
    deposit_amount_daily?: number;
    /** Общая сумма залога */
    deposit_amount_total?: number;
    /** Возможность выкупа (true/false) */
    is_buyout_possible?: boolean;
    /** Минимальный период аренды в днях */
    minimum_period_days?: number;
    /** Название условия аренды */
    name?: string;
    /** Схемы аренды */
    schemas?: Schemas[];

    [key: string]: any;
}

export class Body6 implements IBody6 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Идентификатор условия аренды */
    rent_term_id?: number;

    [key: string]: any;

    constructor(data?: IBody6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.rent_term_id = _data["rent_term_id"];
        }
    }

    static fromJS(data: any): Body6 {
        data = typeof data === 'object' ? data : {};
        let result = new Body6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["rent_term_id"] = this.rent_term_id;
        return data;
    }
}

export interface IBody6 {
    /** VIN-номер автомобиля */
    id?: string;
    /** Идентификатор условия аренды */
    rent_term_id?: number;

    [key: string]: any;
}

export class Body7 implements IBody7 {
    /** Номер телефона пользователя */
    phone?: string;
    /** Код аутентификации */
    code?: number;

    [key: string]: any;

    constructor(data?: IBody7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.phone = _data["phone"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): Body7 {
        data = typeof data === 'object' ? data : {};
        let result = new Body7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["phone"] = this.phone;
        data["code"] = this.code;
        return data;
    }
}

export interface IBody7 {
    /** Номер телефона пользователя */
    phone?: string;
    /** Код аутентификации */
    code?: number;

    [key: string]: any;
}

export class Body8 implements IBody8 {
    /** Номер телефона пользователя */
    phone?: string;

    [key: string]: any;

    constructor(data?: IBody8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.phone = _data["phone"];
        }
    }

    static fromJS(data: any): Body8 {
        data = typeof data === 'object' ? data : {};
        let result = new Body8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["phone"] = this.phone;
        return data;
    }
}

export interface IBody8 {
    /** Номер телефона пользователя */
    phone?: string;

    [key: string]: any;
}

export class Body9 implements IBody9 {
    /** Идентификатор автомобиля, который необходимо забронировать */
    id?: number;

    [key: string]: any;

    constructor(data?: IBody9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Body9 {
        data = typeof data === 'object' ? data : {};
        let result = new Body9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IBody9 {
    /** Идентификатор автомобиля, который необходимо забронировать */
    id?: number;

    [key: string]: any;
}

export class Body10 implements IBody10 {
    /** Идентификатор автомобиля, для которого необходимо отменить бронирование */
    id?: number;

    [key: string]: any;

    constructor(data?: IBody10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Body10 {
        data = typeof data === 'object' ? data : {};
        let result = new Body10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IBody10 {
    /** Идентификатор автомобиля, для которого необходимо отменить бронирование */
    id?: number;

    [key: string]: any;
}

export class Anonymous implements IAnonymous {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous {
    message?: string;

    [key: string]: any;
}

export class Anonymous2 implements IAnonymous2 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous2 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous2 {
    message?: string;

    [key: string]: any;
}

export class Anonymous3 implements IAnonymous3 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous3 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous3 {
    message?: string;

    [key: string]: any;
}

export class Anonymous4 implements IAnonymous4 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous4 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous4 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous5 implements IAnonymous5 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous5 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous5 {
    message?: string;

    [key: string]: any;
}

export class Anonymous6 implements IAnonymous6 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous6 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous6 {
    message?: string;

    [key: string]: any;
}

export class Anonymous7 implements IAnonymous7 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous7 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous7 {
    message?: string;

    [key: string]: any;
}

export class Anonymous8 implements IAnonymous8 {
    message?: string;
    /** Список ошибок валидации */
    errors?: any | undefined;

    [key: string]: any;

    constructor(data?: IAnonymous8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous8 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous8 {
    message?: string;
    /** Список ошибок валидации */
    errors?: any | undefined;

    [key: string]: any;
}

export class Anonymous9 implements IAnonymous9 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous9 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous9 {
    message?: string;

    [key: string]: any;
}

export class Anonymous10 implements IAnonymous10 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous10 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous10 {
    message?: string;

    [key: string]: any;
}

export class Anonymous11 implements IAnonymous11 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous11 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous11 {
    message?: string;

    [key: string]: any;
}

export class Anonymous12 implements IAnonymous12 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous12 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous12 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous13 implements IAnonymous13 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous13 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous13 {
    message?: string;

    [key: string]: any;
}

export class Anonymous14 implements IAnonymous14 {
    message?: string;
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Anonymous14 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous14 {
    message?: string;
    id?: number;

    [key: string]: any;
}

export class Anonymous15 implements IAnonymous15 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous15 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous15 {
    message?: string;

    [key: string]: any;
}

export class Anonymous16 implements IAnonymous16 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous16 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous16 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous17 implements IAnonymous17 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous17 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous17 {
    message?: string;

    [key: string]: any;
}

export class Anonymous18 implements IAnonymous18 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous18 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous18 {
    message?: string;

    [key: string]: any;
}

export class Anonymous19 implements IAnonymous19 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous19 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous19 {
    message?: string;

    [key: string]: any;
}

export class Anonymous20 implements IAnonymous20 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous20) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous20 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous20();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous20 {
    message?: string;

    [key: string]: any;
}

export class Anonymous21 implements IAnonymous21 {
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous21) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous21 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous21();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous21 {
    errors?: any;

    [key: string]: any;
}

export class Anonymous22 implements IAnonymous22 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous22) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous22 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous22();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous22 {
    message?: string;

    [key: string]: any;
}

export class Anonymous23 implements IAnonymous23 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous23) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous23 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous23();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous23 {
    message?: string;

    [key: string]: any;
}

export class Anonymous24 implements IAnonymous24 {
    /** Данные пользователя */
    user?: User;

    [key: string]: any;

    constructor(data?: IAnonymous24) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous24 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous24();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAnonymous24 {
    /** Данные пользователя */
    user?: User;

    [key: string]: any;
}

export class Anonymous25 implements IAnonymous25 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous25) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous25 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous25();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous25 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;
}

export class Anonymous26 implements IAnonymous26 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous26) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous26 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous26();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous26 {
    message?: string;

    [key: string]: any;
}

export class Anonymous27 implements IAnonymous27 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous27) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous27 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous27();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous27 {
    message?: string;

    [key: string]: any;
}

export class Anonymous28 implements IAnonymous28 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous28) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous28 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous28();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous28 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;
}

export class Anonymous29 implements IAnonymous29 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous29) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous29 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous29();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous29 {
    message?: string;

    [key: string]: any;
}

export class Anonymous30 implements IAnonymous30 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous30) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous30 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous30();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous30 {
    message?: string;

    [key: string]: any;
}

export class Anonymous31 implements IAnonymous31 {
    /** Успешность операции */
    success?: boolean;

    [key: string]: any;

    constructor(data?: IAnonymous31) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
        }
    }

    static fromJS(data: any): Anonymous31 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous31();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        return data;
    }
}

export interface IAnonymous31 {
    /** Успешность операции */
    success?: boolean;

    [key: string]: any;
}

export class Anonymous32 implements IAnonymous32 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;

    constructor(data?: IAnonymous32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): Anonymous32 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["errors"] = this.errors;
        return data;
    }
}

export interface IAnonymous32 {
    /** Список ошибок валидации */
    errors?: any;

    [key: string]: any;
}

export class Anonymous33 implements IAnonymous33 {
    cars?: Cars2[];

    [key: string]: any;

    constructor(data?: IAnonymous33) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cars"])) {
                this.cars = [] as any;
                for (let item of _data["cars"])
                    this.cars!.push(Cars2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous33 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous33();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cars)) {
            data["cars"] = [];
            for (let item of this.cars)
                data["cars"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous33 {
    cars?: Cars2[];

    [key: string]: any;
}

export class Anonymous34 implements IAnonymous34 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous34) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous34 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous34();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous34 {
    message?: string;

    [key: string]: any;
}

export class Anonymous35 implements IAnonymous35 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous35) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous35 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous35();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous35 {
    message?: string;

    [key: string]: any;
}

export class Anonymous36 implements IAnonymous36 {
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous36) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous36 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous36();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous36 {
    message?: string;

    [key: string]: any;
}

export class Anonymous37 implements IAnonymous37 {
    /** Сообщение об успешной отмене бронирования */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous37) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous37 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous37();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous37 {
    /** Сообщение об успешной отмене бронирования */
    message?: string;

    [key: string]: any;
}

export class Anonymous38 implements IAnonymous38 {
    /** Требуется аутентификация для выполнения запроса */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous38) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous38 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous38();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous38 {
    /** Требуется аутентификация для выполнения запроса */
    message?: string;

    [key: string]: any;
}

export class Anonymous39 implements IAnonymous39 {
    /** У вас нет разрешения на выполнение этого действия */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous39) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous39 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous39();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous39 {
    /** У вас нет разрешения на выполнение этого действия */
    message?: string;

    [key: string]: any;
}

export class Anonymous40 implements IAnonymous40 {
    /** Автомобиль с указанным идентификатором не найден */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous40) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous40 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous40();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous40 {
    /** Автомобиль с указанным идентификатором не найден */
    message?: string;

    [key: string]: any;
}

export class Anonymous41 implements IAnonymous41 {
    /** Машина не забронирована */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous41) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous41 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous41();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous41 {
    /** Машина не забронирована */
    message?: string;

    [key: string]: any;
}

export class Anonymous42 implements IAnonymous42 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous42) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous42 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous42();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous42 {
    /** Внутренняя ошибка сервера */
    message?: string;

    [key: string]: any;
}

export class Anonymous43 implements IAnonymous43 {
    /** Информация об автомобиле */
    car?: Car;

    [key: string]: any;

    constructor(data?: IAnonymous43) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.car = _data["car"] ? Car.fromJS(_data["car"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous43 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous43();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["car"] = this.car ? this.car.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAnonymous43 {
    /** Информация об автомобиле */
    car?: Car;

    [key: string]: any;
}

export class Anonymous44 implements IAnonymous44 {
    /** Автомобиль с указанным идентификатором не найден */
    message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous44) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous44 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous44();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous44 {
    /** Автомобиль с указанным идентификатором не найден */
    message?: string;

    [key: string]: any;
}

export class Anonymous45 implements IAnonymous45 {
    url?: string;

    [key: string]: any;

    constructor(data?: IAnonymous45) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Anonymous45 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous45();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        return data;
    }
}

export interface IAnonymous45 {
    url?: string;

    [key: string]: any;
}

export class Anonymous46 implements IAnonymous46 {
    error?: string;

    [key: string]: any;

    constructor(data?: IAnonymous46) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): Anonymous46 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous46();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["error"] = this.error;
        return data;
    }
}

export interface IAnonymous46 {
    error?: string;

    [key: string]: any;
}

export class Cars implements ICars {
    /** VIN-номер автомобиля */
    id?: string;
    /** Город колонны */
    city?: string;
    /** Название колонны */
    division_name?: string;
    /** Вид топлива (1 - газ, 0 - бензин) */
    fuel_type?: number;
    /** КПП ТС (1 - автомат, 0 - механика) */
    transmission_type?: number;
    /** Бренд автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Тариф автомобиля (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** Ссылки на фотографии автомобиля */
    images?: string[];

    [key: string]: any;

    constructor(data?: ICars) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.city = _data["city"];
            this.division_name = _data["division_name"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.class = _data["class"];
            this.year_produced = _data["year_produced"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
        }
    }

    static fromJS(data: any): Cars {
        data = typeof data === 'object' ? data : {};
        let result = new Cars();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["city"] = this.city;
        data["division_name"] = this.division_name;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["class"] = this.class;
        data["year_produced"] = this.year_produced;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        return data;
    }
}

export interface ICars {
    /** VIN-номер автомобиля */
    id?: string;
    /** Город колонны */
    city?: string;
    /** Название колонны */
    division_name?: string;
    /** Вид топлива (1 - газ, 0 - бензин) */
    fuel_type?: number;
    /** КПП ТС (1 - автомат, 0 - механика) */
    transmission_type?: number;
    /** Бренд автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Тариф автомобиля (1 - эконом, 2 - комфорт, 3 - комфорт+, 4 - бизнес) */
    class?: number;
    /** Год выпуска автомобиля */
    year_produced?: number;
    /** Ссылки на фотографии автомобиля */
    images?: string[];

    [key: string]: any;
}

export class Schemas implements ISchemas {
    /** Стоимость аренды авто */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchemas) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schemas {
        data = typeof data === 'object' ? data : {};
        let result = new Schemas();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchemas {
    /** Стоимость аренды авто */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;
}

export class User implements IUser {
    user_status?: UserStatus;
    /** Номер телефона пользователя */
    phone?: string;
    /** Имя пользователя */
    name?: string | undefined;
    /** Email пользователя */
    email?: string | undefined;
    user_type?: UserType;
    /** Название города */
    city_name?: string;
    /** Данные документов водителя */
    docs?: Docs[];

    [key: string]: any;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.user_status = _data["user_status"];
            this.phone = _data["phone"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.user_type = _data["user_type"];
            this.city_name = _data["city_name"];
            if (Array.isArray(_data["docs"])) {
                this.docs = [] as any;
                for (let item of _data["docs"])
                    this.docs!.push(Docs.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["user_status"] = this.user_status;
        data["phone"] = this.phone;
        data["name"] = this.name;
        data["email"] = this.email;
        data["user_type"] = this.user_type;
        data["city_name"] = this.city_name;
        if (Array.isArray(this.docs)) {
            data["docs"] = [];
            for (let item of this.docs)
                data["docs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUser {
    user_status?: UserStatus;
    /** Номер телефона пользователя */
    phone?: string;
    /** Имя пользователя */
    name?: string | undefined;
    /** Email пользователя */
    email?: string | undefined;
    user_type?: UserType;
    /** Название города */
    city_name?: string;
    /** Данные документов водителя */
    docs?: Docs[];

    [key: string]: any;
}

export class Cars2 implements ICars2 {
    /** Идентификатор автомобиля */
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Год производства */
    year_produced?: number;
    /** Ссылки на изображения */
    images?: string[];
    carClass?: CarClass;
    /** Название парка */
    park_name?: string;
    city?: string;
    /** Данные о подразделении */
    division?: Division;
    /** Данные о сроке аренды */
    rent_term?: Rent_term;

    [key: string]: any;

    constructor(data?: ICars2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.year_produced = _data["year_produced"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.carClass = _data["CarClass"];
            this.park_name = _data["park_name"];
            this.city = _data["city"];
            this.division = _data["division"] ? Division.fromJS(_data["division"]) : <any>undefined;
            this.rent_term = _data["rent_term"] ? Rent_term.fromJS(_data["rent_term"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Cars2 {
        data = typeof data === 'object' ? data : {};
        let result = new Cars2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["year_produced"] = this.year_produced;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["CarClass"] = this.carClass;
        data["park_name"] = this.park_name;
        data["city"] = this.city;
        data["division"] = this.division ? this.division.toJSON() : <any>undefined;
        data["rent_term"] = this.rent_term ? this.rent_term.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICars2 {
    /** Идентификатор автомобиля */
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    /** Марка автомобиля */
    brand?: string;
    /** Модель автомобиля */
    model?: string;
    /** Год производства */
    year_produced?: number;
    /** Ссылки на изображения */
    images?: string[];
    carClass?: CarClass;
    /** Название парка */
    park_name?: string;
    city?: string;
    /** Данные о подразделении */
    division?: Division;
    /** Данные о сроке аренды */
    rent_term?: Rent_term;

    [key: string]: any;
}

export class Car implements ICar {
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    brand?: string;
    model?: string;
    year_produced?: number;
    images?: string;
    city?: string;
    booking_time?: string | undefined;
    user_booked_id?: number | undefined;
    carClass?: CarClass;
    /** Данные о сроке аренды */
    rent_term?: Rent_term2;
    /** Данные о схеме аренды */
    schema?: Schema;
    /** Информация о подразделении */
    division?: Division2;

    [key: string]: any;

    constructor(data?: ICar) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.fuel_type = _data["fuel_type"];
            this.transmission_type = _data["transmission_type"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.year_produced = _data["year_produced"];
            this.images = _data["images"];
            this.city = _data["city"];
            this.booking_time = _data["booking_time"];
            this.user_booked_id = _data["user_booked_id"];
            this.carClass = _data["CarClass"];
            this.rent_term = _data["rent_term"] ? Rent_term2.fromJS(_data["rent_term"]) : <any>undefined;
            this.schema = _data["schema"] ? Schema.fromJS(_data["schema"]) : <any>undefined;
            this.division = _data["division"] ? Division2.fromJS(_data["division"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Car {
        data = typeof data === 'object' ? data : {};
        let result = new Car();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["fuel_type"] = this.fuel_type;
        data["transmission_type"] = this.transmission_type;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["year_produced"] = this.year_produced;
        data["images"] = this.images;
        data["city"] = this.city;
        data["booking_time"] = this.booking_time;
        data["user_booked_id"] = this.user_booked_id;
        data["CarClass"] = this.carClass;
        data["rent_term"] = this.rent_term ? this.rent_term.toJSON() : <any>undefined;
        data["schema"] = this.schema ? this.schema.toJSON() : <any>undefined;
        data["division"] = this.division ? this.division.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICar {
    id?: number;
    fuel_type?: FuelType;
    transmission_type?: TransmissionType;
    brand?: string;
    model?: string;
    year_produced?: number;
    images?: string;
    city?: string;
    booking_time?: string | undefined;
    user_booked_id?: number | undefined;
    carClass?: CarClass;
    /** Данные о сроке аренды */
    rent_term?: Rent_term2;
    /** Данные о схеме аренды */
    schema?: Schema;
    /** Информация о подразделении */
    division?: Division2;

    [key: string]: any;
}

export class Docs implements IDocs {
    driverDocumentType?: DriverDocumentType;
    /** URL документа */
    url?: string | undefined;

    [key: string]: any;

    constructor(data?: IDocs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.driverDocumentType = _data["driverDocumentType"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Docs {
        data = typeof data === 'object' ? data : {};
        let result = new Docs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["driverDocumentType"] = this.driverDocumentType;
        data["url"] = this.url;
        return data;
    }
}

export interface IDocs {
    driverDocumentType?: DriverDocumentType;
    /** URL документа */
    url?: string | undefined;

    [key: string]: any;
}

export class Division implements IDivision {
    /** Название подразделения */
    name?: string;

    [key: string]: any;

    constructor(data?: IDivision) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Division {
        data = typeof data === 'object' ? data : {};
        let result = new Division();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        return data;
    }
}

export interface IDivision {
    /** Название подразделения */
    name?: string;

    [key: string]: any;
}

export class Rent_term implements IRent_term {
    /** Сумма депозита за день */
    deposit_amount_daily?: number;
    /** Общая сумма депозита */
    deposit_amount_total?: number;
    /** Минимальный период в днях */
    minimum_period_days?: number;
    /** Возможность выкупа */
    is_buyout_possible?: boolean;
    schemas?: Schemas2[];

    [key: string]: any;

    constructor(data?: IRent_term) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.deposit_amount_daily = _data["deposit_amount_daily"];
            this.deposit_amount_total = _data["deposit_amount_total"];
            this.minimum_period_days = _data["minimum_period_days"];
            this.is_buyout_possible = _data["is_buyout_possible"];
            if (Array.isArray(_data["schemas"])) {
                this.schemas = [] as any;
                for (let item of _data["schemas"])
                    this.schemas!.push(Schemas2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Rent_term {
        data = typeof data === 'object' ? data : {};
        let result = new Rent_term();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["deposit_amount_daily"] = this.deposit_amount_daily;
        data["deposit_amount_total"] = this.deposit_amount_total;
        data["minimum_period_days"] = this.minimum_period_days;
        data["is_buyout_possible"] = this.is_buyout_possible;
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRent_term {
    /** Сумма депозита за день */
    deposit_amount_daily?: number;
    /** Общая сумма депозита */
    deposit_amount_total?: number;
    /** Минимальный период в днях */
    minimum_period_days?: number;
    /** Возможность выкупа */
    is_buyout_possible?: boolean;
    schemas?: Schemas2[];

    [key: string]: any;
}

export class Rent_term2 implements IRent_term2 {
    /** Идентификатор срока аренды */
    id?: number;
    /** Сумма депозита за день */
    deposit_amount_daily?: number;
    /** Общая сумма депозита */
    deposit_amount_total?: number;
    /** Минимальный период в днях */
    minimum_period_days?: number;
    /** Возможность выкупа */
    is_buyout_possible?: boolean;

    [key: string]: any;

    constructor(data?: IRent_term2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.deposit_amount_daily = _data["deposit_amount_daily"];
            this.deposit_amount_total = _data["deposit_amount_total"];
            this.minimum_period_days = _data["minimum_period_days"];
            this.is_buyout_possible = _data["is_buyout_possible"];
        }
    }

    static fromJS(data: any): Rent_term2 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent_term2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["deposit_amount_daily"] = this.deposit_amount_daily;
        data["deposit_amount_total"] = this.deposit_amount_total;
        data["minimum_period_days"] = this.minimum_period_days;
        data["is_buyout_possible"] = this.is_buyout_possible;
        return data;
    }
}

export interface IRent_term2 {
    /** Идентификатор срока аренды */
    id?: number;
    /** Сумма депозита за день */
    deposit_amount_daily?: number;
    /** Общая сумма депозита */
    deposit_amount_total?: number;
    /** Минимальный период в днях */
    minimum_period_days?: number;
    /** Возможность выкупа */
    is_buyout_possible?: boolean;

    [key: string]: any;
}

export class Schema implements ISchema {
    /** Идентификатор схемы аренды */
    id?: number;
    /** Идентификатор срока аренды */
    rent_term_id?: number;
    /** Суточная стоимость */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.rent_term_id = _data["rent_term_id"];
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schema {
        data = typeof data === 'object' ? data : {};
        let result = new Schema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["rent_term_id"] = this.rent_term_id;
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchema {
    /** Идентификатор схемы аренды */
    id?: number;
    /** Идентификатор срока аренды */
    rent_term_id?: number;
    /** Суточная стоимость */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;
}

export class Division2 implements IDivision2 {
    coords?: string | undefined;
    address?: string | undefined;
    name?: string;
    park_name?: string;

    [key: string]: any;

    constructor(data?: IDivision2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.coords = _data["coords"];
            this.address = _data["address"];
            this.name = _data["name"];
            this.park_name = _data["park_name"];
        }
    }

    static fromJS(data: any): Division2 {
        data = typeof data === 'object' ? data : {};
        let result = new Division2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["coords"] = this.coords;
        data["address"] = this.address;
        data["name"] = this.name;
        data["park_name"] = this.park_name;
        return data;
    }
}

export interface IDivision2 {
    coords?: string | undefined;
    address?: string | undefined;
    name?: string;
    park_name?: string;

    [key: string]: any;
}

export class Schemas2 implements ISchemas2 {
    /** Суточная стоимость */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;

    constructor(data?: ISchemas2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.daily_amount = _data["daily_amount"];
            this.non_working_days = _data["non_working_days"];
            this.working_days = _data["working_days"];
        }
    }

    static fromJS(data: any): Schemas2 {
        data = typeof data === 'object' ? data : {};
        let result = new Schemas2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["daily_amount"] = this.daily_amount;
        data["non_working_days"] = this.non_working_days;
        data["working_days"] = this.working_days;
        return data;
    }
}

export interface ISchemas2 {
    /** Суточная стоимость */
    daily_amount?: number;
    /** Количество нерабочих дней */
    non_working_days?: number;
    /** Количество рабочих дней */
    working_days?: number;

    [key: string]: any;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}